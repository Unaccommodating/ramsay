[{"D:\\node-react\\ramsay\\client\\src\\index.js":"1","D:\\node-react\\ramsay\\client\\src\\App.js":"2","D:\\node-react\\ramsay\\client\\src\\components\\AppRouter.js":"3","D:\\node-react\\ramsay\\client\\src\\utils\\const.js":"4","D:\\node-react\\ramsay\\client\\src\\routes.js":"5","D:\\node-react\\ramsay\\client\\src\\pages\\Auth.js":"6","D:\\node-react\\ramsay\\client\\src\\pages\\Catalog.js":"7","D:\\node-react\\ramsay\\client\\src\\pages\\Admin.js":"8","D:\\node-react\\ramsay\\client\\src\\pages\\DishPage.js":"9","D:\\node-react\\ramsay\\client\\src\\store\\UserStore.js":"10","D:\\node-react\\ramsay\\client\\src\\store\\DishStore.js":"11","D:\\node-react\\ramsay\\client\\src\\components\\NavBar.js":"12","D:\\node-react\\ramsay\\client\\src\\http\\userAPI.js":"13","D:\\node-react\\ramsay\\client\\src\\http\\index.js":"14","D:\\node-react\\ramsay\\client\\src\\http\\dishAPI.js":"15","D:\\node-react\\ramsay\\client\\src\\components\\CategoryBar.js":"16","D:\\node-react\\ramsay\\client\\src\\components\\NationalityBar.js":"17","D:\\node-react\\ramsay\\client\\src\\components\\SpecialGroupBar.js":"18","D:\\node-react\\ramsay\\client\\src\\components\\DishList.js":"19","D:\\node-react\\ramsay\\client\\src\\components\\DishItem.js":"20","D:\\node-react\\ramsay\\client\\src\\components\\Search.js":"21","D:\\node-react\\ramsay\\client\\src\\components\\Pages.js":"22","D:\\node-react\\ramsay\\client\\src\\components\\WebSock.js":"23"},{"size":483,"mtime":1658085599285,"results":"24","hashOfConfig":"25"},{"size":839,"mtime":1658085599294,"results":"26","hashOfConfig":"25"},{"size":800,"mtime":1657486172917,"results":"27","hashOfConfig":"25"},{"size":194,"mtime":1657262731127,"results":"28","hashOfConfig":"25"},{"size":694,"mtime":1657261818340,"results":"29","hashOfConfig":"25"},{"size":3953,"mtime":1657702751295,"results":"30","hashOfConfig":"25"},{"size":2241,"mtime":1657906911778,"results":"31","hashOfConfig":"25"},{"size":8653,"mtime":1657908934445,"results":"32","hashOfConfig":"25"},{"size":1985,"mtime":1657833336466,"results":"33","hashOfConfig":"25"},{"size":425,"mtime":1657471413438,"results":"34","hashOfConfig":"25"},{"size":3246,"mtime":1657907349174,"results":"35","hashOfConfig":"25"},{"size":1556,"mtime":1657400889372,"results":"36","hashOfConfig":"25"},{"size":1045,"mtime":1657745329765,"results":"37","hashOfConfig":"25"},{"size":428,"mtime":1656268675150,"results":"38","hashOfConfig":"25"},{"size":1715,"mtime":1657891100137,"results":"39","hashOfConfig":"25"},{"size":714,"mtime":1657894613460,"results":"40","hashOfConfig":"25"},{"size":993,"mtime":1657477546835,"results":"41","hashOfConfig":"25"},{"size":774,"mtime":1657477568054,"results":"42","hashOfConfig":"25"},{"size":464,"mtime":1657479223682,"results":"43","hashOfConfig":"25"},{"size":1413,"mtime":1657655718474,"results":"44","hashOfConfig":"25"},{"size":1645,"mtime":1658086784096,"results":"45","hashOfConfig":"25"},{"size":822,"mtime":1657650111056,"results":"46","hashOfConfig":"25"},{"size":3288,"mtime":1657948142409,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1xxuila",{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"57"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"57"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"57"},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"57"},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"107","messages":"108","suppressedMessages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"110","messages":"111","suppressedMessages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"113","messages":"114","suppressedMessages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"116","messages":"117","suppressedMessages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"119","messages":"120","suppressedMessages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"57"},"D:\\node-react\\ramsay\\client\\src\\index.js",[],[],"D:\\node-react\\ramsay\\client\\src\\App.js",["123"],[],"D:\\node-react\\ramsay\\client\\src\\components\\AppRouter.js",[],[],[],"D:\\node-react\\ramsay\\client\\src\\utils\\const.js",[],[],"D:\\node-react\\ramsay\\client\\src\\routes.js",[],[],"D:\\node-react\\ramsay\\client\\src\\pages\\Auth.js",["124"],[],"import React, {useContext, useState} from 'react';\r\nimport {Button, Card, Container, Form, Row} from \"react-bootstrap\";\r\nimport {LOGIN_ROUTE, REGISTRATION_ROUTE, CATALOG_ROUTE} from \"../utils/const\";\r\nimport {NavLink, useHistory, useLocation} from \"react-router-dom\";\r\nimport {login, registration} from \"../http/userAPI\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport {Context} from \"../index\";\r\n\r\nconst Auth = observer(() => {\r\n    const {user} = useContext(Context)\r\n    const location = useLocation()\r\n    const history = useHistory()\r\n    const isLogin = location.pathname === LOGIN_ROUTE\r\n    const [email, setEmail] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [nickname, setNickname] = useState('')\r\n    // const [avatar, setAvatar] = useState(null)\r\n\r\n    // const selectFile = e => {\r\n    //     setAvatar(e.target.files[0])\r\n    // }\r\n\r\n    const click = async () => {\r\n        try {\r\n            let data;\r\n            if (isLogin) {\r\n                data = await login(email, password)\r\n            } else {\r\n                data = await registration(email, password, nickname)\r\n            }\r\n            user.setUser(user)\r\n            user.setIsAuth(true)\r\n            history.push(CATALOG_ROUTE)\r\n        } catch (e) {\r\n            alert(e.response.data.message)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container\r\n            className=\"d-flex justify-content-center align-items-center\"\r\n            style={{height: window.innerHeight - 54}}\r\n        >\r\n            <Card style={{width: 600}} className=\"p-5\">\r\n                <h2 className=\"m-auto\">{isLogin ? \"Авторизация\" : \"Регистрация\"}</h2>\r\n                <Form className=\"d-flex flex-column\">\r\n                    <Form.Control\r\n                        className=\"mt-3\"\r\n                        placeholder=\"Введите ваш email\"\r\n                        value={email}\r\n                        onChange={e => setEmail(e.target.value)}\r\n                    />\r\n                    <Form.Control\r\n                        className=\"mt-3\"\r\n                        placeholder=\"Введите ваш пароль\"\r\n                        value={password}\r\n                        onChange={e => setPassword(e.target.value)}\r\n                        type=\"password\"\r\n                        autoComplete=\"on\"\r\n                    />\r\n                    {isLogin ? null : [\r\n                        <Form.Control\r\n                        className=\"mt-3\"\r\n                        placeholder=\"Введите имя, под которым Вас будут видеть пользователи\"\r\n                        value={nickname}\r\n                        onChange={e => setNickname(e.target.value)}\r\n                    />,\r\n                        // <Form.Label>Фотография профиля</Form.Label>,\r\n                        // <Form.Control type=\"file\" className=\"mt-3\" onChange={selectFile}/>\r\n                    ]}\r\n                    <Row className=\"d-flex justify-content-between align-items-center mt-3\">\r\n                        {isLogin ?\r\n                            <div style={{width: \"auto\"}}>\r\n                                Нет аккаунта? <NavLink to={REGISTRATION_ROUTE}>Зарегестрируйтесь</NavLink>\r\n                            </div>\r\n                            :\r\n                            <div style={{width: \"auto\"}}>\r\n                                Есть аккаунт? <NavLink to={LOGIN_ROUTE}>Войдите</NavLink>\r\n                            </div>\r\n                        }\r\n                        <Button style={{width: \"auto\"}} variant={\"outline-success\"} onClick={click}>\r\n                            {isLogin ? 'Войти' : 'Регистрация'}\r\n                        </Button>\r\n                    </Row>\r\n                </Form>\r\n            </Card>\r\n        </Container>\r\n    );\r\n});\r\n\r\nexport default Auth;","D:\\node-react\\ramsay\\client\\src\\pages\\Catalog.js",["125","126"],[],"import React, {useContext, useEffect} from 'react';\r\nimport {Button, Col, Container, Row} from \"react-bootstrap\";\r\nimport CategoryBar from \"../components/CategoryBar\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport {Context} from \"../index\";\r\nimport {fetchCategory, fetchDishes, fetchIngridients, fetchNationality, fetchSpecialGroup} from \"../http/dishAPI\";\r\nimport SpecialGroupBar from \"../components/SpecialGroupBar\";\r\nimport DishList from \"../components/DishList\";\r\nimport Search from \"../components/Search\";\r\nimport Pages from \"../components/Pages\";\r\n\r\nconst Catalog = observer(() => {\r\n    const {dish} = useContext(Context)\r\n\r\n    useEffect(() => {\r\n        fetchCategory().then(data => dish.setCategories(data))\r\n        fetchNationality().then(data => dish.setNationalities(data))\r\n        fetchSpecialGroup().then(data => dish.setSpecialGroup(data))\r\n        fetchIngridients().then(data => dish.setIngridient(data))\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        fetchDishes(dish.selectedCategory.id, dish.selectedNationality.id, dish.selectedSpecialGroup.id, dish.selectedIngridientSearch, dish.page, 8).then(data => {\r\n            dish.setDish(data)\r\n            dish.setTotalCount(data.length)\r\n        })\r\n    }, [dish.page, dish.selectedCategory, dish.selectedNationality, dish.selectedSpecialGroup, dish.selectedIngridientSearch])\r\n\r\n    const clean = () => {\r\n        if (!dish.selectedIngridientSearch){\r\n            dish.setSelectedCategory('*')\r\n            dish.setSelectedSpecialGroup('*')\r\n            dish.setSelectedNationality('*')\r\n        } else {\r\n            window.location.reload()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <Row className=\"mt-3\">\r\n                <Search/>\r\n            </Row>\r\n            <Row className=\"mt-3\">\r\n                <Col md={9}>\r\n                    <DishList/>\r\n                </Col>\r\n                <Col md={3}>\r\n                    <CategoryBar/>\r\n                    <SpecialGroupBar className=\"mt-3\"/>\r\n                    <Button className=\"mt-3\" variant=\"outline-danger\" onClick={clean}>Очистить</Button>\r\n                </Col>\r\n            </Row>\r\n            <Pages/>\r\n        </Container>\r\n    );\r\n});\r\n\r\nexport default Catalog;","D:\\node-react\\ramsay\\client\\src\\pages\\Admin.js",["127","128","129"],[],"import React, {useContext, useEffect, useState} from 'react';\r\nimport {Button, Dropdown, Form, Row, Col} from \"react-bootstrap\";\r\nimport {Context} from \"../index\";\r\nimport moduleStyle from \"../modules/Admin.module.css\"\r\nimport {\r\n    createDish,\r\n    fetchCategory,\r\n    fetchIngridients,\r\n    fetchMeaSure,\r\n    fetchNationality,\r\n    fetchSpecialGroup\r\n} from \"../http/dishAPI\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport jwt_decode from \"jwt-decode\";\r\nimport {forEach} from \"react-bootstrap/ElementChildren\";\r\n\r\n\r\nconst Admin = observer(() => {\r\n    const {dish} = useContext(Context)\r\n    const [title, setTitle] = useState('')\r\n    const [cookingTime, setCookingTime] = useState(0)\r\n    const [description, setDescription] = useState('')\r\n    const [info, setInfo] = useState([])\r\n    const [file, setFile] = useState(null)\r\n\r\n    let token = localStorage.getItem(localStorage.key(0))\r\n    let userId = token\r\n\r\n    useEffect(() => {\r\n        fetchCategory().then(data => dish.setCategories(data))\r\n        fetchNationality().then(data => dish.setNationalities(data))\r\n        fetchSpecialGroup().then(data => dish.setSpecialGroup(data))\r\n        fetchMeaSure().then(data => dish.setMeaSure(data))\r\n        fetchIngridients().then(data => dish.setIngridient(data))\r\n    }, [])\r\n\r\n    console.log(dish.ingridients)\r\n\r\n    const addInfo = () => {\r\n        setInfo([...info, {ingridient_id: 0, amount: 0, measure_id: 0, additionally: \" \", number: Date.now()}])\r\n    }\r\n\r\n    const removeInfo = (number) => {\r\n        setInfo(info.filter(i => i.number !== number))\r\n    }\r\n\r\n    const changeInfo = (key, value, number) => {\r\n        setInfo(info.map(i => i.number === number ? {...i, [key]: value} : i))\r\n    }\r\n\r\n    const selectFile = e => {\r\n        setFile(e.target.files[0])\r\n    }\r\n\r\n    const addDish = () => {\r\n\r\n        let composition = []\r\n        info.forEach(i =>\r\n            composition.push({\r\n                ingridient_id: i.ingridient_id,\r\n                amount: i.amount,\r\n                measure_id: i.measure_id,\r\n                additionally: i.additionally\r\n                }\r\n            )\r\n        )\r\n        console.log(composition)\r\n        const formData = new FormData()\r\n        formData.append('title', title)\r\n        formData.append('description', description)\r\n        formData.append('cooking_time', `${cookingTime}`)\r\n        formData.append('img', file)\r\n        formData.append('category_id', dish.selectedCategory.id)\r\n        formData.append('nationality_id', dish.selectedNationality.id)\r\n        formData.append('special_group_id', dish.selectedSpecialGroup.id)\r\n        formData.append('info', JSON.stringify(composition))\r\n        formData.append('user_id', userId)\r\n        createDish(formData).then(data => console.log(data[0]))\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={moduleStyle.form}>\r\n            <Form>\r\n                <h1>Добавление рецепта</h1>\r\n                <Dropdown className=\"mt-2 mb-2\">\r\n                    <Dropdown.Toggle>{dish.selectedCategory.title || \"Выберите категорию\"}</Dropdown.Toggle>\r\n                    <Dropdown.Menu>\r\n                        {dish.categories.map(category =>\r\n                            <Dropdown.Item\r\n                                onClick={() => dish.setSelectedCategory(category)}\r\n                                key={category.id}\r\n                            >\r\n                                {category.title}\r\n                            </Dropdown.Item>\r\n                        )}\r\n                    </Dropdown.Menu>\r\n                </Dropdown>\r\n                <Dropdown className=\"mt-2 mb-2\">\r\n                    <Dropdown.Toggle>{dish.selectedNationality.name || \"Выберите кухню\"}</Dropdown.Toggle>\r\n                    <Dropdown.Menu>\r\n                        {dish.nationalities.map(nationality =>\r\n                            <Dropdown.Item\r\n                                onClick={() => dish.setSelectedNationality(nationality)}\r\n                                key={nationality.id}\r\n                            >\r\n                                {nationality.name}\r\n                            </Dropdown.Item>\r\n                        )}\r\n                    </Dropdown.Menu>\r\n                </Dropdown>\r\n                <Dropdown className=\"mt-2 mb-2\">\r\n                    <Dropdown.Toggle>{dish.selectedSpecialGroup.name || \"Выберите назначение\"}</Dropdown.Toggle>\r\n                    <Dropdown.Menu>\r\n                        {dish.specialGroup.map(specialGroup =>\r\n                            <Dropdown.Item\r\n                                onClick={() => dish.setSelectedSpecialGroup(specialGroup)}\r\n                                key={specialGroup.id}\r\n                            >\r\n                                {specialGroup.name}\r\n                            </Dropdown.Item>\r\n                        )}\r\n                    </Dropdown.Menu>\r\n                </Dropdown>\r\n                <h4>Название</h4>\r\n                <Form.Control value={title} onChange={(e) => setTitle(e.target.value)} placeholder=\"Название блюда\"/>\r\n                <h4>Инструкция приготовления</h4>\r\n                <Form.Control as=\"textarea\" value={description} onChange={(e) => setDescription(e.target.value)}\r\n                              placeholder=\"Инструкция приготовления\"/>\r\n                <h4>Время приготовления (мин)</h4>\r\n                <Form.Control value={cookingTime} onChange={(e) => setCookingTime(Number(e.target.value))}\r\n                              placeholder=\"Примерное время (мин)\"/>\r\n                <hr/>\r\n                <h4>Фотография</h4>\r\n                <Form.Control onChange={selectFile} type=\"file\"/>\r\n                <hr/>\r\n                {info.map(i =>\r\n                    <Row className=\"mt-4\" key={i.number}>\r\n                        <Col md={3}>\r\n                            <input value={i.ingridient_id} list=\"ingridients\" placeholder=\"Ингредиент\"\r\n                                   onChange={(e) => changeInfo('ingridient_id', e.target.value, i.number)}/>\r\n                                <datalist id=\"ingridients\">\r\n                                    {dish.ingridients.map(ingridient_id =>\r\n                                        <option value={ingridient_id.id} onClick={() => dish.setSelectedIngridient(ingridient_id)}\r\n                                                key={ingridient_id.id}>{ingridient_id.title}</option>)}\r\n                                </datalist>\r\n                        </Col>\r\n                        <Col md={1}>\r\n                            <Form.Control\r\n                                value={i.amount}\r\n                                onChange={(e) => changeInfo('amount', e.target.value, i.number)}\r\n                                placeholder=\"Кол-во\"\r\n                            />\r\n                        </Col>\r\n                        <Col md={2}>\r\n                            <select value={i.measure_id} onChange={(e) => changeInfo('measure_id', e.target.value, i.number)}>\r\n                                {dish.measure_id.map(measure_id =>\r\n                                    <option value={measure_id.id} onClick={() => dish.setSelectedMeaSure(measure_id)}\r\n                                            key={measure_id.id}>{measure_id.title}</option>)}\r\n                            </select>\r\n                        </Col>\r\n                        <Col md={3}>\r\n                            <Form.Control\r\n                                value={i.additionally}\r\n                                onChange={(e) => changeInfo('additionally', e.target.value, i.number)}\r\n                                placeholder=\"Примечание\"\r\n                            />\r\n                        </Col>\r\n                        <Col md={1}>\r\n                            <Button\r\n                                onClick={() => removeInfo(i.number)}\r\n                                variant={\"outline-danger\"}\r\n                            >\r\n                                ❌\r\n                            </Button>\r\n                        </Col>\r\n                    </Row>\r\n                )}\r\n                <Button className=\"mt-3\" variant={\"outline-dark\"} onClick={addInfo}>Добавить\r\n                    ингридиент</Button>\r\n            </Form>\r\n            <Button className=\"mt-4\" variant=\"outline-success\" onClick={addDish}>Добавить</Button>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default Admin;","D:\\node-react\\ramsay\\client\\src\\pages\\DishPage.js",["130","131"],[],"import React, {useEffect, useLayoutEffect, useState} from 'react';\r\nimport {Col, Container, Image, Row} from \"react-bootstrap\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport {fetchOneDish, fetchOneDishCompound} from \"../http/dishAPI\";\r\nimport WebSock from \"../components/WebSock\";\r\n\r\n\r\nconst DishPage = () => {\r\n    const [dish, setDish] = useState({})\r\n    const [info, setInfo] = useState([])\r\n    const {id} = useParams()\r\n\r\n    useLayoutEffect(() => {\r\n        fetchOneDish(id).then(data => setDish(data[0]))\r\n        fetchOneDishCompound(id).then(data => setInfo(data))\r\n    }, [])\r\n\r\n    return (\r\n        <Container>\r\n            <Row className='mt-3'>\r\n                <Col md={6}>\r\n                    <h1>{dish.title}</h1>\r\n                    <p>Рецепт от: {dish.nickname}</p>\r\n                    <Image src={process.env.REACT_APP_API_URL + dish.img}\r\n                           style={{backgroundSize: \"cover\", width: '400px', borderRadius: '15px'}}/>\r\n                </Col>\r\n                <Col md={3}>\r\n                    <h2>Как приготовить</h2>\r\n                    <p>{dish.description}</p>\r\n                </Col>\r\n            </Row>\r\n            <Row className=\"mt-5\">\r\n                <h2>Ингредиенты</h2>\r\n                {\r\n                    info.map((i, index) =>\r\n                        <Row key={index}  style={{backgroundColor: index % 2 === 0 ? '#808B96 ' : 'transparent', padding: 10}} >\r\n                            <Col>\r\n                                {i.ingridient}\r\n                            </Col>\r\n                            <Col>{i.amount}</Col>\r\n                            <Col>{i.measure}</Col>\r\n                            <Col>( {i.additionally} )</Col>\r\n                        </Row>\r\n                    )\r\n                }\r\n            </Row>\r\n            <Row className=\"mt-5\">\r\n                <WebSock/>\r\n            </Row>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default DishPage;","D:\\node-react\\ramsay\\client\\src\\store\\UserStore.js",[],[],"D:\\node-react\\ramsay\\client\\src\\store\\DishStore.js",[],[],"D:\\node-react\\ramsay\\client\\src\\components\\NavBar.js",[],[],"D:\\node-react\\ramsay\\client\\src\\http\\userAPI.js",[],[],"D:\\node-react\\ramsay\\client\\src\\http\\index.js",[],[],"D:\\node-react\\ramsay\\client\\src\\http\\dishAPI.js",[],[],"D:\\node-react\\ramsay\\client\\src\\components\\CategoryBar.js",[],[],"D:\\node-react\\ramsay\\client\\src\\components\\NationalityBar.js",[],[],"D:\\node-react\\ramsay\\client\\src\\components\\SpecialGroupBar.js",[],[],"D:\\node-react\\ramsay\\client\\src\\components\\DishList.js",[],[],"D:\\node-react\\ramsay\\client\\src\\components\\DishItem.js",[],[],"D:\\node-react\\ramsay\\client\\src\\components\\Search.js",["132","133","134"],[],"D:\\node-react\\ramsay\\client\\src\\components\\Pages.js",[],[],"D:\\node-react\\ramsay\\client\\src\\components\\WebSock.js",["135","136","137"],[],"import React, {useEffect, useRef, useState} from 'react';\r\nimport moduleStyle from \"../modules/Comment.module.css\"\r\nimport {Button, Form} from \"react-bootstrap\";\r\nimport {fetchName} from \"../http/userAPI\";\r\nimport {fetchComments} from \"../http/dishAPI\";\r\nimport {useParams} from \"react-router-dom\";\r\n\r\n\r\nconst WebSock = () => {\r\n    const [messages, setMessages] = useState([]);\r\n    const [value, setValue] = useState('');\r\n    // const [comments, setComments] = useState({});\r\n    const socket = useRef()\r\n    const [connected, setConnected] = useState(false);\r\n    const [username, setUsername] = useState('')\r\n    const userId = localStorage.getItem('userId')\r\n    const {id} = useParams()\r\n\r\n    useEffect(() => {\r\n        fetchName(userId).then(data => setUsername(data))\r\n        connect()\r\n        // fetchComments(id).then(data => setComments(data))\r\n    }, [])\r\n\r\n    function connect() {\r\n        socket.current = new WebSocket('ws://localhost:4000')\r\n\r\n        socket.current.onopen = () => {\r\n            setConnected(true)\r\n            console.log('Подключение установлено')\r\n            const message = {\r\n                event: 'connection',\r\n                username,\r\n                id: Date.now()\r\n            }\r\n            socket.current.send(JSON.stringify(message))\r\n        }\r\n        socket.current.onmessage = (event) => {\r\n            const message = JSON.parse(event.data)\r\n            setMessages(prev => [message, ...prev])\r\n        }\r\n        socket.current.onclose= () => {\r\n            console.log('Socket закрыт')\r\n        }\r\n        socket.current.onerror = () => {\r\n            console.log('Socket произошла ошибка')\r\n        }\r\n    }\r\n\r\n    const sendMessage = async () => {\r\n        const message = {\r\n            username,\r\n            message: value,\r\n            id: Date.now(),\r\n            event: 'message'\r\n        }\r\n        socket.current.send(JSON.stringify(message));\r\n        setValue('')\r\n    }\r\n\r\n\r\n    if (!connected || !username) {\r\n        return (\r\n            <div className=\"center\">\r\n                <b>Зарегестрируйтесь, чтобы оставлять комментарии</b>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h2>Обсуждения</h2>\r\n            <div className={moduleStyle.form}>\r\n                <Form className={moduleStyle.interface}>\r\n                    <Form.Control as=\"textarea\" className={moduleStyle.textarea} value={value} onChange={e => setValue(e.target.value)} type=\"text\"/>\r\n                    <Button className=\"mt-3\" onClick={sendMessage}>Отправить</Button>\r\n                </Form>\r\n                <div className=\"messages\">\r\n                    {messages.map(mess =>\r\n                        <div className={moduleStyle.message} key={mess.id}>\r\n                            {mess.event === 'connection'\r\n                                ? <hr/>\r\n                                : <div>\r\n                                    {mess.username}: {mess.message}\r\n                                </div>\r\n                            }\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default WebSock;",{"ruleId":"138","severity":1,"message":"139","line":19,"column":6,"nodeType":"140","endLine":19,"endColumn":8,"suggestions":"141"},{"ruleId":"142","severity":1,"message":"143","line":29,"column":17,"nodeType":"144","messageId":"145","endLine":29,"endColumn":21},{"ruleId":"138","severity":1,"message":"146","line":20,"column":8,"nodeType":"140","endLine":20,"endColumn":10,"suggestions":"147"},{"ruleId":"138","severity":1,"message":"146","line":27,"column":8,"nodeType":"140","endLine":27,"endColumn":126,"suggestions":"148"},{"ruleId":"142","severity":1,"message":"149","line":14,"column":8,"nodeType":"144","messageId":"145","endLine":14,"endColumn":18},{"ruleId":"142","severity":1,"message":"150","line":15,"column":9,"nodeType":"144","messageId":"145","endLine":15,"endColumn":16},{"ruleId":"138","severity":1,"message":"146","line":35,"column":8,"nodeType":"140","endLine":35,"endColumn":10,"suggestions":"151"},{"ruleId":"142","severity":1,"message":"152","line":1,"column":16,"nodeType":"144","messageId":"145","endLine":1,"endColumn":25},{"ruleId":"138","severity":1,"message":"153","line":16,"column":8,"nodeType":"140","endLine":16,"endColumn":10,"suggestions":"154"},{"ruleId":"142","severity":1,"message":"152","line":1,"column":28,"nodeType":"144","messageId":"145","endLine":1,"endColumn":37},{"ruleId":"142","severity":1,"message":"155","line":1,"column":39,"nodeType":"144","messageId":"145","endLine":1,"endColumn":54},{"ruleId":"142","severity":1,"message":"156","line":3,"column":23,"nodeType":"144","messageId":"145","endLine":3,"endColumn":32},{"ruleId":"142","severity":1,"message":"157","line":5,"column":9,"nodeType":"144","messageId":"145","endLine":5,"endColumn":22},{"ruleId":"142","severity":1,"message":"158","line":17,"column":12,"nodeType":"144","messageId":"145","endLine":17,"endColumn":14},{"ruleId":"138","severity":1,"message":"159","line":23,"column":8,"nodeType":"140","endLine":23,"endColumn":10,"suggestions":"160"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array.","ArrayExpression",["161"],"no-unused-vars","'data' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'dish'. Either include it or remove the dependency array.",["162"],["163"],"'jwt_decode' is defined but never used.","'forEach' is defined but never used.",["164"],"'useEffect' is defined but never used.","React Hook useLayoutEffect has a missing dependency: 'id'. Either include it or remove the dependency array.",["165"],"'useLayoutEffect' is defined but never used.","'ListGroup' is defined but never used.","'fetchComments' is defined but never used.","'id' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'connect' and 'userId'. Either include them or remove the dependency array.",["166"],{"desc":"167","fix":"168"},{"desc":"169","fix":"170"},{"desc":"171","fix":"172"},{"desc":"169","fix":"173"},{"desc":"174","fix":"175"},{"desc":"176","fix":"177"},"Update the dependencies array to be: [user]",{"range":"178","text":"179"},"Update the dependencies array to be: [dish]",{"range":"180","text":"181"},"Update the dependencies array to be: [dish.page, dish.selectedCategory, dish.selectedNationality, dish.selectedSpecialGroup, dish.selectedIngridientSearch, dish]",{"range":"182","text":"183"},{"range":"184","text":"181"},"Update the dependencies array to be: [id]",{"range":"185","text":"186"},"Update the dependencies array to be: [connect, userId]",{"range":"187","text":"188"},[631,633],"[user]",[938,940],"[dish]",[1230,1348],"[dish.page, dish.selectedCategory, dish.selectedNationality, dish.selectedSpecialGroup, dish.selectedIngridientSearch, dish]",[1286,1288],[590,592],"[id]",[867,869],"[connect, userId]"]